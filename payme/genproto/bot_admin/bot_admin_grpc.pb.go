// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.1
// source: bot_admin.proto

package bot_admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotAdminServiceClient is the client API for BotAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotAdminServiceClient interface {
	NotifyPaymentSuccess(ctx context.Context, in *NotifyPaymentSuccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type botAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotAdminServiceClient(cc grpc.ClientConnInterface) BotAdminServiceClient {
	return &botAdminServiceClient{cc}
}

func (c *botAdminServiceClient) NotifyPaymentSuccess(ctx context.Context, in *NotifyPaymentSuccessRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/bot_admin.BotAdminService/NotifyPaymentSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotAdminServiceServer is the server API for BotAdminService service.
// All implementations must embed UnimplementedBotAdminServiceServer
// for forward compatibility
type BotAdminServiceServer interface {
	NotifyPaymentSuccess(context.Context, *NotifyPaymentSuccessRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedBotAdminServiceServer()
}

// UnimplementedBotAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotAdminServiceServer struct {
}

func (UnimplementedBotAdminServiceServer) NotifyPaymentSuccess(context.Context, *NotifyPaymentSuccessRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyPaymentSuccess not implemented")
}
func (UnimplementedBotAdminServiceServer) mustEmbedUnimplementedBotAdminServiceServer() {}

// UnsafeBotAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotAdminServiceServer will
// result in compilation errors.
type UnsafeBotAdminServiceServer interface {
	mustEmbedUnimplementedBotAdminServiceServer()
}

func RegisterBotAdminServiceServer(s grpc.ServiceRegistrar, srv BotAdminServiceServer) {
	s.RegisterService(&BotAdminService_ServiceDesc, srv)
}

func _BotAdminService_NotifyPaymentSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyPaymentSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotAdminServiceServer).NotifyPaymentSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bot_admin.BotAdminService/NotifyPaymentSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotAdminServiceServer).NotifyPaymentSuccess(ctx, req.(*NotifyPaymentSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotAdminService_ServiceDesc is the grpc.ServiceDesc for BotAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bot_admin.BotAdminService",
	HandlerType: (*BotAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyPaymentSuccess",
			Handler:    _BotAdminService_NotifyPaymentSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot_admin.proto",
}
